/*
 * generated by Xtext 2.24.0
 */
package org.xtext.cs130.activity.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.cs130.activity.activity.Activity
import org.xtext.cs130.activity.activity.If
import org.xtext.cs130.activity.activity.Fork
import org.xtext.cs130.activity.activity.Branch
import org.xtext.cs130.activity.activity.Condition
import org.xtext.cs130.activity.activity.Participant
import org.xtext.cs130.activity.activity.Action
import org.xtext.cs130.activity.activity.Else

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ActivityGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val diagram = resource.contents.filter(Activity).head
		val text = generate(diagram);
		val fileName = resource.URI.trimFileExtension.appendFileExtension("plantuml").lastSegment
		fsa.generateFile(fileName, text);
	}
	def String generate(Activity activity) '''
	@startuml
	«IF activity.reference !== null»
		«generate(activity.reference)»
	«ENDIF»
	start
	«IF !activity.ifelse.isEmpty() || !activity.forks.isEmpty() || !activity.actions.isEmpty()»
		«FOR ifstatements : activity.ifelse»
			«generate(ifstatements)»
		«ENDFOR»
		«FOR forks : activity.forks.filter(Fork)»
			«generate(forks)»
		«ENDFOR»
		«FOR actions : activity.actions.filter(Action)»
			«generate(actions)»
		«ENDFOR»
	«ENDIF»
	stop
	@enduml
	'''
	def String generate(Action action) '''
	«IF action.participant !== null»
		«generate(action.participant)»
	«ENDIF»
	:«action.name»;
	'''
	def String generate(Participant participant) '''
	|«participant.name»|
	'''
	def String generate(Branch branch) '''
	«FOR ifstatements : branch.ifelse.filter(If)»
		«generate(ifstatements)»
	«ENDFOR»
	«FOR forks : branch.forks.filter(Fork)»
		«generate(forks)»
	«ENDFOR»
	«FOR actions : branch.actions.filter(Action)»
		«generate(actions)»
	«ENDFOR»
	'''
	def String generate(Fork fork) '''
	«IF fork.reference !== null»
		«generate(fork.reference)»
	«ENDIF»
	fork
	«FOR branches : fork.branches.filter(Branch) SEPARATOR '\nfork again' AFTER ''»
		«generate(branches)»
	«ENDFOR»
	end fork
	'''
	def String generate(If ifelse) '''
	«IF ifelse.reference !== null»
		«generate(ifelse.reference)»
	«ENDIF»
	if («ifelse.condition.name») then (yes)
	«FOR ifstatements : ifelse.ifelse.filter(If)»
		«generate(ifstatements)»
	«ENDFOR»
	«FOR forks : ifelse.forks.filter(Fork)»
		«generate(forks)»
	«ENDFOR»
	«FOR actions : ifelse.actions.filter(Action)»
		«generate(actions)»
	«ENDFOR»
	«generate(ifelse.elsestatement)»
	'''
	def String generate(Else ifelse)'''
	else (no)
	«FOR ifstatements : ifelse.ifelse.filter(If)»
		«generate(ifstatements)»
	«ENDFOR»
	«FOR forks : ifelse.forks.filter(Fork)»
		«generate(forks)»
	«ENDFOR»
	«FOR actions : ifelse.actions.filter(Action)»
		«generate(actions)»
	«ENDFOR»
	endif
	'''
}