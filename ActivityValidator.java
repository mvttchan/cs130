/*
 * generated by Xtext 2.24.0
 */
package org.xtext.cs130.activity.validation;
import java.util.List;

import org.eclipse.xtext.validation.Check;
import org.xtext.cs130.activity.activity.*;
/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class ActivityValidator extends AbstractActivityValidator {
	
//	public static final String INVALID_NAME = "invalidName";
//
//	@Check
//	public void checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.getName().charAt(0))) {
//			warning("Name should start with a capital",
//					ActivityPackage.Literals.GREETING__NAME,
//					INVALID_NAME);
//		}
//	}
	public boolean actions(List<Action> actions, Participant p) {
		for(int i = 0; i < actions.size(); ++i) {
			if(actions.get(i).getParticipant() == p) {
				return true;
			}
		}
		return false;
	}
	public boolean ifs(List<If> ifs, Participant p) {
		for(int i = 0; i < ifs.size(); ++i) {
			if(ifs.get(i).getReference() == p) {
				return true;
			}
			List<Action> actions = ifs.get(i).getActions();
			List<Fork> forks = ifs.get(i).getForks();
			List<If> ifelse = ifs.get(i).getIfelse();
			if(actions(actions, p) || forks(forks, p) || ifs(ifelse, p)) {
				return true;
			}
			List<Action> elseactions = ifs.get(i).getElsestatement().getActions();
			List<Fork> elseforks = ifs.get(i).getElsestatement().getForks();
			List<If> elses = ifs.get(i).getElsestatement().getIfelse();
			if(actions(elseactions, p) || forks(elseforks, p) || ifs(elses, p)) {
				return true;
			}
		}
		return false;
	}
	public boolean branches(List<Branch> branches, Participant p) {
		for(int i = 0; i < branches.size(); ++i) {
			List<Action> actions = branches.get(i).getActions();
			List<Fork> forks = branches.get(i).getForks();
			List<If> ifs = branches.get(i).getIfelse();
			if(actions(actions, p) || forks(forks, p) || ifs(ifs, p)) {
				return true;
			}
		}
		return false;
	}
	public boolean forks(List<Fork> forks, Participant p) {
		for(int i = 0; i < forks.size(); ++i) {
			if(forks.get(i).getReference() == p) {
				return true;
			}
			List<Branch> branches = forks.get(i).getBranches();
			if(branches(branches, p)) {
				return true;
			}
		}
		return false;
	}
	@Check
	public void unused(Participant participant) {
		Activity activity = ((Activity) participant.eContainer());
		List<Action> actions = activity.getActions();
		List<Fork> forks = activity.getForks();
		List<If> ifs = activity.getIfelse();
		if(!actions(actions, participant) && !forks(forks, participant) && !ifs(ifs, participant)) {
			warning("Participant is unused", ActivityPackage.Literals.PARTICIPANT__NAME);
		}
	}
	@Check
	public void unreferenced(Activity activity) {
		Participant reference = activity.getReference();
		List<Participant> participants = activity.getParticipants();
		if(reference == null && !participants.isEmpty()) {
			error("Acitvity is unreferenced", ActivityPackage.Literals.ACTIVITY__NAME);
		}
		else if(reference != null && participants.isEmpty()) {
			error("Acitvity is unreferenced", ActivityPackage.Literals.ACTIVITY__NAME);
		}
		else if(!participants.contains(reference)) {
			error("Acitvity is unreferenced", ActivityPackage.Literals.ACTIVITY__NAME);
		}
	}
}
